name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
  #   environment: staging

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Deploy to staging server
  #     run: |
  #       echo "Deploying to staging environment..."
  #       # Add your staging deployment logic here
  #       # Example: SSH to server and run docker-compose
  #       # ssh user@staging-server "cd /app && docker-compose pull && docker-compose up -d"

  # Deploy to production
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
  #   environment: production

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Deploy to production server
  #     run: |
  #       echo "Deploying to production environment..."
  #       # Add your production deployment logic here
  #       # Example: SSH to server and run docker-compose
  #       # ssh user@prod-server "cd /app && docker-compose pull && docker-compose up -d"

  # Notify deployment status
  # notify:
  #   name: Notify Deployment Status
  #   runs-on: ubuntu-latest
  #   needs: [deploy-staging, deploy-production]
  #   if: always()

  #   steps:
  #   - name: Notify Slack
  #     uses: 8398a7/action-slack@v3
  #     if: always()
  #     with:
  #       status: ${{ job.status }}
  #       channel: '#deployments'
  #       webhook_url: ${{ secrets.SLACK_WEBHOOK }}
  #     env:
  #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 