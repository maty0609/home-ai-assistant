name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '24'

jobs:
  # Backend tests and linting
  backend:
    name: Backend (Python/FastAPI)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black flake8 mypy

    - name: Run linting (Black)
      run: |
        cd backend
        black --check --diff .

    - name: Run linting (Flake8)
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run type checking (MyPy)
      run: |
        cd backend
        mypy . --ignore-missing-imports

    - name: Initialize test database
      run: |
        cd backend
        python -c "
import os
import psycopg
from dotenv import load_dotenv

load_dotenv()

conn_info = 'postgresql://postgres:postgres@localhost:5432/test_db'
connection = psycopg.connect(conn_info)

try:
    with connection.cursor() as cur:
        cur.execute('CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, email VARCHAR(255) UNIQUE NOT NULL, name VARCHAR(255) NOT NULL, hashed_password VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);')
        cur.execute('CREATE TABLE IF NOT EXISTS chat_history (id SERIAL PRIMARY KEY, session_id VARCHAR(255) NOT NULL, message JSONB NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);')
        cur.execute('CREATE INDEX IF NOT EXISTS idx_chat_history_session_id ON chat_history(session_id);')
        cur.execute('CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);')
        connection.commit()
        print('Test database initialized successfully!')
except Exception as e:
    print(f'Error: {e}')
finally:
    connection.close()
        "

    - name: Run backend tests
      env:
        DB_POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-ci
        AZURE_OPENAI_URL: https://test.openai.azure.com/
        AZURE_OPENAI_API_KEY: test-key
        EMB_OPENAI_URL: https://test.openai.azure.com/
        OPENAI_API_KEY: test-key
        CHROMADB_PATH: ./test_chroma_db
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend tests and linting
  frontend:
    name: Frontend (Next.js)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting (ESLint)
      run: |
        cd frontend
        npm run lint

    - name: Run type checking (TypeScript)
      run: |
        cd frontend
        npx tsc --noEmit

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Docker build and test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker images
      run: |
        # Build backend image
        docker build -t home-ai-backend:test ./backend
        
        # Build frontend image
        docker build -t home-ai-frontend:test ./frontend
        
        # Test backend container
        docker run --rm home-ai-backend:test python -c "print('Backend container test passed')"
        
        # Test frontend container
        docker run --rm home-ai-frontend:test node -e "console.log('Frontend container test passed')"

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend, docker]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run integration tests
      env:
        DB_POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-ci
        AZURE_OPENAI_URL: https://test.openai.azure.com/
        AZURE_OPENAI_API_KEY: test-key
        EMB_OPENAI_URL: https://test.openai.azure.com/
        OPENAI_API_KEY: test-key
        CHROMADB_PATH: ./test_chroma_db
      run: |
        cd backend
        # Start backend server in background
        python -m uvicorn backend:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
        # Run integration tests
        pytest tests/integration/ -v

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency updates check
  dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check Python dependencies
      run: |
        cd backend
        pip install safety
        safety check --json --output safety-report.json || true
        echo "Safety check completed"

    - name: Check Node.js dependencies
      run: |
        cd frontend
        npm audit --audit-level moderate || true
        echo "NPM audit completed" 