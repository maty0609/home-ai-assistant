name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '24'

jobs:
  # Lint and format checks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 mypy

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint Python code
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check Python code
        run: |
          cd backend
          black --check --diff .

      - name: Type check Python code
        run: |
          cd backend
          mypy . --ignore-missing-imports

      - name: Lint TypeScript/JavaScript
        run: |
          cd frontend
          npm run lint

      - name: Check TypeScript types
        run: |
          cd frontend
          npx tsc --noEmit

  # Backend tests
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Create test database schema
        run: |
          cd backend
          python -c "
import os
import psycopg
from dotenv import load_dotenv

load_dotenv()

conn_info = 'postgresql://postgres:postgres@localhost:5432/test_db'
connection = psycopg.connect(conn_info)

try:
    with connection.cursor() as cur:
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                email VARCHAR(255) UNIQUE NOT NULL,
                name VARCHAR(255) NOT NULL,
                hashed_password VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        
        cur.execute('''
            CREATE TABLE IF NOT EXISTS chat_history (
                id SERIAL PRIMARY KEY,
                session_id VARCHAR(255) NOT NULL,
                message JSONB NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        
        connection.commit()
        print('Test database tables created successfully!')
        
except Exception as e:
    print(f'Error: {e}')
finally:
    connection.close()
"

      - name: Run backend tests
        env:
          DB_POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key
          AZURE_OPENAI_URL: https://test.openai.azure.com/
          AZURE_OPENAI_API_KEY: test-key
          EMB_OPENAI_URL: https://test.openai.azure.com/
          OPENAI_API_KEY: test-key
          CHROMADB_PATH: ./test_chroma_db
        run: |
          cd backend
          python -m pytest tests/ -v --tb=short

  # Frontend tests
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # Docker build and test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker images
        run: |
          # Build images
          docker-compose build
          
          # Test that images can start
          docker-compose up -d postgres
          sleep 10
          docker-compose up -d backend
          sleep 10
          
          # Test backend health
          curl -f http://localhost:8000/docs || exit 1
          
          # Cleanup
          docker-compose down

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Python security scan
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          bandit -r . -f json -o bandit-report.json || true

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=moderate || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
            frontend/npm-audit.json

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
          
          cd ../frontend
          npm ci

      - name: Start backend
        env:
          DB_POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key
          AZURE_OPENAI_URL: https://test.openai.azure.com/
          AZURE_OPENAI_API_KEY: test-key
          EMB_OPENAI_URL: https://test.openai.azure.com/
          OPENAI_API_KEY: test-key
          CHROMADB_PATH: ./test_chroma_db
        run: |
          cd backend
          python -c "
import os
import psycopg
from dotenv import load_dotenv

load_dotenv()

conn_info = 'postgresql://postgres:postgres@localhost:5432/test_db'
connection = psycopg.connect(conn_info)

try:
    with connection.cursor() as cur:
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                email VARCHAR(255) UNIQUE NOT NULL,
                name VARCHAR(255) NOT NULL,
                hashed_password VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        
        cur.execute('''
            CREATE TABLE IF NOT EXISTS chat_history (
                id SERIAL PRIMARY KEY,
                session_id VARCHAR(255) NOT NULL,
                message JSONB NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        
        connection.commit()
        print('Test database tables created successfully!')
        
except Exception as e:
    print(f'Error: {e}')
finally:
    connection.close()
"
          python backend.py &
          sleep 10

      - name: Run integration tests
        run: |
          cd backend
          python -m pytest integration_tests/ -v --tb=short

  # Build and push Docker images (on main branch)
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, docker, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/home-ai-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/home-ai-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/home-ai-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/home-ai-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 